package holamundo;

public class complejidad3 {
	//analizando la complejidad de este algoritmo (especial)
	
	public static int nuevo(int n) {//	1
		int x;						
		x= 1;						//	1
		int t = 0; //tiempo
		while(x<n) {				//	1 + log 3 n 
			x = x*3;				//	log 3 n (logaritmo de n en base 3)
			t++; // medimos tiempo
		}
		System.out.println("tiempo :"+t);
		return x;					//	1
		/*						----------------
		 * 							t(n) = 2(log 3 n) + 4 
		 * 	asi pertenece --> O ( log n)						 
		 * */
	}
	
	public static int nuevo2(int n) {//	1
		int x;						
		x= n;						//	1
		
		while(x<n) {				//	1 + log 5 n 
			x = x/5;				//	log 5 n (logaritmo de n en base 5)
		}

		return x;					//	1
		/*						----------------
		 * 							t(n) = 2(log 5 n) + 4 
		 * 	asi pertenece --> O ( log n)						 
		 * */
	}
	/*
	 * examen.........
	 * 1. sumar los digitos de un numero
	 * 2. asumiendo que los elementos estan ordenados en un vector utilice la busqueda binaria para encontrar un elemento
	 * 
	 * a) encontrar la frecuencia de ejecucion
	 * b ) complejidad algoritmica
	 * */
	public static int sumarDig(int n) {//1
		int s = 0;					//1
		while(n > 0) {				// 1 + log 10 n
			int dig = n%10;			// log 10 n
			n = n/10;				// log 10 n
			s = s+dig;				// log 10 n
		} 
		return s;					// 1
		/*
		 * 						--------------------
		 * 						t(n) = 4 (log 10 n) + 4 ---> pertenece al O(log n)
		 * */
	}
	public static int busquedaBinaria(int elementos[], int x)	//1
    {
        int l = 0, r = elementos.length - 1;	// 2
        while (l <= r) {						// 1 + log 2 n 
            int m = l + (r - l) / 2;			//1*log 2 n

            if (elementos[m] == x)				//1*log 2 n
                return m;						//1*log 2 n
 
            if (elementos[m] < x)				//1*log 2 n
                l = m + 1;						//1*log 2 n
 
            else
                r = m - 1;		
        }
        return -1;								// 1
        /*								------------------
         * 									t(n) = 5 + 6 log 2 n --> O(log n) 
         * */
    }
	// si n = 2
	public static int busquedaBinaria2(int elementos[], int x)	//1
    {
        int l = 0, r = elementos.length - 1;
        int t=0; // 2
        while (l <= r) {						// 1
        	t++;
        	  System.out.println(t);
            int m = l + (r - l) / 2;			//1

            if (elementos[m] == x)				//1
                return m;						//1
 
            if (elementos[m] < x)				
                l = m + 1;						
 
            else
                r = m - 1;		
        }
      
        return -1;								
        /*								------------------
         * 									t(n) =  --> O(log n) 
         * */
    }
	public static void main(String args[]){
		int v[]= {2,4,6,7,8,9,10,12,14,16,18,20,21,22,23,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,42,44};
		busquedaBinaria2(v, 2);
		
		/* PRUEBA DE ESCRITORIO
		 * n	t
		 * -------
		 * 2	1	-->	2^1 = 2
		 * 4	2	-->	2^2 = 4
		 * 8	3	-->	2^3 = 8
		 * 16	4	-->	2^4 = 16
		 * 32	5	-->	2^5 = 32
		 * 
		 * 				2^t = n	--> t = log 2 n
		 * 
		 * */
		System.out.println("ejer 1...");
		System.out.println(sumarDig(236));
	}
}
