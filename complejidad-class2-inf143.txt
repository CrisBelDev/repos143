
import java.util.Scanner;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * ANALISIS DE COMPLEJIDAD ALGORITMICA
 *  2. sumar la diagonal principal de una matriz
 */
public class Complejidad_algoritmica {
    
    public int suma1(int n){                // 1
        int s = 0;                          // 1
        for (int i = 1 ; i <= n ; i++ ){    // n+1
            s +=1;                          // n
        }
        return s;                           // 1
                                    /*--------------------
                                        t(n) = 1 + 1 + (n+1) + n + 1 = 2n + 4 
                                        si n = 2 -->  t(2) = 2(2) + 4 = 4 + 4 = 8
        Asi: t (n) pertenece al O(n)
                                    */
    }
    public int suma2(int n){    // 1
        return n*(n+1)/2;       // 1
                        // -----------------
                        // t(n) = 2
                        // 
    }
    
    // cuando el for(i = 0 ; i<n ; i++)  -->  n
    //        s = s+0       --->
    
    public int sumaDiagonal (int v[][], int n){ // 1
        int s = 0; // 1
        for (int i = 1 ; i<= n;i++ ){ // n+1
            
            s = s + v[i][i]; // n
        }
        return s; // 1
        /*
            t (n ) = 1 + 1 + n +1 + n + 1
            t (n) = 4 + 2n
            asi t(n ) pertenece al 0(n)
        */
    }
    
    public int sumaDiagonalRecu (int v[][], int n){ // 1
        if (n == 1 ){ 
            return v[1][1]; 
        }
        
        return v[n][n]+ sumaDiagonalRecu(v, n-1);
       
    }
    
    // obt la suma de los primeros numeros naturales
    public static void main(String[] args) {
        Scanner leer = new Scanner(System.in);
        int n = 3;
        Complejidad_algoritmica op = new Complejidad_algoritmica();
        int v[][] = new int[n+1][n+1];
        v[1][1] = 1;    v[1][2] = 2;    v[1][3] = 3;
        
        v[2][1] = 4;    v[2][2] = 5;    v[2][3] = 6;
        
        v[3][1] = 7;    v[3][2] = 8;    v[3][3] = 9;
        
        System.out.println("suma diag: "+ op.sumaDiagonalRecu(v, n));
        
    }
}
